{"version":3,"sources":["components/Navbar.js","components/Landing.js","components/Login.js","components/UserFunctions.js","components/Register.js","components/Profile.js","components/Todo/TodoHome.js","App.js","serviceWorker.js","index.js"],"names":["Landing","e","preventDefault","localStorage","removeItem","this","props","history","push","loginRegLink","className","to","userLink","href","onClick","logOut","bind","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","usertoken","Component","withRouter","style","textAlign","color","src","alt","maxWidth","Login","state","email","password","errors","onChange","onSubmit","setState","target","name","value","user","axios","post","then","response","setItem","data","catch","err","console","log","login","res","htmlFor","placeholder","required","Register","first_name","last_name","newUser","register","Profile","token","decoded","jwt_decode","List","useState","todos","setTodos","text","setText","fetchTodos","a","fetch","json","addTodo","method","headers","body","JSON","stringify","isCompleted","useEffect","items","map","todo","key","_id","width","Item","deleteTodo","toggleDone","TodoHome","App","Navbar","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b7098401.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nclass Landing extends Component {\n  // function to be called on logout\n    logOut(e) {\n    e.preventDefault()\n    // remove jwt token from local storage\n    localStorage.removeItem('usertoken')\n    this.props.history.push(`/`)\n  }\n\n  render() {\n      // If user is not logged in\n    const loginRegLink = (\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Login\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Register\n          </Link>\n        </li>\n      </ul>\n    )\n\n          // If user is logged in\n    const userLink = (\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <Link to=\"/profile\" className=\"nav-link\">\n            User\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/todohome\" className=\"nav-link\">\n            Todos\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <a href=\"!#\" onClick={this.logOut.bind(this)} className=\"nav-link\">\n            Logout\n          </a>\n        </li>\n      </ul>\n    )\n\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark rounded\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarsExample10\"\n          aria-controls=\"navbarsExample10\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div\n          className=\"collapse navbar-collapse justify-content-md-center\"\n          id=\"navbarsExample10\"\n        >\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n          </ul>\n          {localStorage.usertoken ? userLink : loginRegLink}\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default withRouter(Landing)","import React, { Component } from 'react';\n\n// This is the landing or welcome page. Class based component is used in it\n\nclass Landing extends Component {\n  render() {\n    return (\n      <div className='container'>\n        <div className='jumbotron mt-5'>\n          <div className='col-sm-8 mx-auto' style={{ textAlign: 'center' }}>\n            <h1 style={{ color: 'seagreen' }} className='text-center'>\n              WELCOME TO TODO LIST\n            </h1>\n            <img src='todo.png' alt='' style={{ maxWidth: '250px' }} />\n            <br/><br/>\n            <h6 className='text-center text-muted'>\n              Created for <a href=\"http://www.ignitelabs.co/index.html\"><b>Ignite Labs</b></a> by <a href=\"https://alikhanmehboob.netlify.app/\"><b>Ali khan Mehboob</b></a>\n            </h6>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React, { Component } from 'react';\nimport { login } from './UserFunctions';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    // state contains email and password\n    this.state = {\n      email: '',\n      password: '',\n      errors: {},\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // called whenever a field changes\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  // called whenever a form is submitted\n  onSubmit(e) {\n    e.preventDefault();\n\n    // user object created based on the state\n    const user = {\n      email: this.state.email,\n      password: this.state.password,\n    };\n\n    // passes the user object to login function from UserFunctions.js\n    login(user).then((res) => {\n      if (res) {\n        this.props.history.push(`/profile`);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='row'>\n          <div className='col-md-6 mt-5 mx-auto'>\n            <form onSubmit={this.onSubmit}>\n              <h1 className='h3 mb-3 font-weight-normal'>Todo Login</h1>\n              <div className='form-group'>\n                <label htmlFor='email'>Email address</label>\n                <input\n                  type='email'\n                  className='form-control'\n                  name='email'\n                  placeholder='Enter email'\n                  value={this.state.email}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <div className='form-group'>\n                <label htmlFor='password'>Password</label>\n                <input\n                  type='password'\n                  className='form-control'\n                  name='password'\n                  placeholder='Password'\n                  value={this.state.password}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <button\n                type='submit'\n                className='btn btn-lg btn-primary btn-block'\n              >\n                Sign In\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import axios from 'axios'\n\n// This file defines backend api calls logic for authentication\nexport const register = (newUser) => {\n  // call register backend api endpoint and provide data\n    return axios\n    .post('users/register', {\n      first_name: newUser.first_name,\n      last_name: newUser.last_name,\n      email: newUser.email,\n      password: newUser.password\n    })\n    .then(response => {\n      console.log('Registered')\n    })\n}\n\nexport const login = (user) => {\n  // call login backend api endpoint and provide data \n    return axios\n    .post('users/login', {\n      email: user.email,\n      password: user.password\n    })\n    .then(response => {\n        // save jwt to browser local storage\n      localStorage.setItem('usertoken', response.data)\n      return response.data\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const getProfile = user => {\n  return axios\n    .get('users/profile', {\n      //headers: { Authorization: ` ${this.getToken()}` }\n    })\n    .then(response => {\n      console.log(response)\n      return response.data\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n","import React, { Component } from 'react'\nimport { register } from './UserFunctions'\n\nclass Register extends Component {\n  constructor() {\n    super()\n    // state initialized\n    this.state = {\n      first_name: '',\n      last_name: '',\n      email: '',\n      password: '',\n      errors: {}\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  // called whenever a field is changed\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  // called whenever form submits\n  onSubmit(e) {\n    e.preventDefault()\n\n    const newUser = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      email: this.state.email,\n      password: this.state.password\n    }\n\n    // passed the newUser object to the register function \n    register(newUser).then(res => {\n      this.props.history.push(`/login`)\n    })\n  }\n\n  // renders the registration form along with validation\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 mt-5 mx-auto\">\n            <form onSubmit={this.onSubmit}>\n              <h1 className=\"h3 mb-3 font-weight-normal\">Todo Register</h1>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">First name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"first_name\"\n                  placeholder=\"Enter your first name\"\n                  value={this.state.first_name}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Last name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"last_name\"\n                  placeholder=\"Enter your last name\"\n                  value={this.state.last_name}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email address</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  value={this.state.email}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  value={this.state.password}\n                  onChange={this.onChange}\n                  required\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-lg btn-primary btn-block\"\n              >\n                Register\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Register","import React, { Component } from 'react'\nimport jwt_decode from 'jwt-decode'\n\nclass Profile extends Component {\n  constructor() {\n    super()\n    this.state = {\n      first_name: '',\n      last_name: '',\n      email: '',\n      errors: {}\n    }\n  }\n\n  // Lifecycle method that is called at start of this component\n  componentDidMount() {\n    const token = localStorage.usertoken\n    \n    // Decodes the token\n    const decoded = jwt_decode(token)\n    \n    // Takes out first_name, last_name and email and sets it to state\n    this.setState({\n      first_name: decoded.first_name,\n      last_name: decoded.last_name,\n      email: decoded.email\n    })\n  }\n\n  // renders the decoded first_name, last_name and email in the UI\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron mt-5\">\n          <div className=\"col-sm-8 mx-auto\">\n            <h1 className=\"text-center\">USER PROFILE</h1>\n          </div>\n          <table className=\"table col-md-6 mx-auto\" >\n            <tbody>\n              <tr>\n                <td>First Name</td>\n                <td>{this.state.first_name}</td>\n              </tr>\n              <tr>\n                <td>Last Name</td>\n                <td>{this.state.last_name}</td>\n              </tr>\n              <tr>\n                <td>Email</td>\n                <td>{this.state.email}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile","import React, { useState, useEffect } from 'react';\n\n// Functional components are used in this purticular file logic and also fetch is used to make api calls\n\nfunction TodoHome() {\n  return (\n    <div>\n      <List />\n    </div>\n  );\n}\n\n// Listing all the todos\nconst List = () => {\n  const [todos, setTodos] = useState([]);\n  const [text, setText] = useState([]);\n\n  // calls the backend getAll api url using fetch and async await\n  const fetchTodos = async () => {\n    const res = await fetch('todos/getAll');\n    setTodos(await res.json());\n  };\n\n  // calls the backend create api url using fetch and async await\n  const addTodo = async () => {\n    await fetch('todos/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ text: text, isCompleted: false }),\n    });\n\n    // refreshes the todo list after each create call and empties the input field\n    fetchTodos();\n    setText('');\n  };\n\n  // fetches the todo list on start of this component\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  // Loops through the items and shows them\n  const items = todos.map((todo) => (\n    <Item todo={todo} key={todo._id} fetchTodos={fetchTodos} />\n  ));\n\n  return (\n    <div className='container'>\n      <div className='jumbotron mt-5'>\n        <div className='col-sm-8 mx-auto'>\n          <h1 className='text-center'>ADD A TODO</h1>\n        </div>\n        <div className='ui centered card' style={{ width: '500px' }}>\n          <div className='content'>\n            <div className='header' style={{ textAlign: 'center' }}>\n              Todo List\n            </div>\n          </div>\n          <div className='content'>\n            <div className='ui relaxed divided list'>{items}</div>\n          </div>\n          <div className='extra content'>\n            <div className='fluid ui action input'>\n              <input\n                type='text'\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                required\n              />\n              <button\n                className='ui teal right labeled icon button'\n                onClick={addTodo}\n              >\n                <i className='plus icon'></i>\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Item = (props) => {\n  const { isCompleted, text, _id } = props.todo;\n\n  // Makes a backend api call to delete todo\n  const deleteTodo = async () => {\n    await fetch(`todos/delete/${_id}`, {\n      method: 'POST',\n    });\n    props.fetchTodos();\n  };\n\n    // Makes a backend api call to mark todo as complete and vice versa\n  const toggleDone = async () => {\n    await fetch(`todos/complete/${_id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ isCompleted: !isCompleted, text }),\n    });\n    // re fetches the list after checkbox is toggled by user\n    props.fetchTodos();\n  };\n\n  return (\n    // Logic to toggle the check mark based on isComplete value of todo\n    <div className='item'>\n      {isCompleted ? (\n        <i\n          className='left floated green check square outline icon'\n          onClick={toggleDone}\n        ></i>\n      ) : (\n        <i\n          className='left floated square outline icon'\n          onClick={toggleDone}\n        ></i>\n      )}\n      {text}\n      <i className='right floated red trash icon' onClick={deleteTodo}></i>\n    </div>\n  );\n};\n\nexport default TodoHome;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n// Components imported\nimport Navbar from './components/Navbar'\nimport Landing from './components/Landing'\nimport Login from './components/Login'\nimport Register from './components/Register'\nimport Profile from './components/Profile'\nimport TodoHome from './components/Todo/TodoHome'\n\n// Define rendering logic and also define all the routes of application\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <div className=\"container\">\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/todohome\" component={TodoHome} />\n          </div>\n          </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}